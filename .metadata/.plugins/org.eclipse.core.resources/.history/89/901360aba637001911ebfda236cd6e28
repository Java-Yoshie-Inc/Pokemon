package de.yoshie2000.pokemon.engine;

import java.util.ArrayList;

import org.newdawn.slick.Input;

import de.yoshie2000.pokemon.maths.Vector;

public class PlayerController extends ObjectController {

	private boolean isWalking = false, sprinting = false, tempAnimation = false;

	private Vector direction = new Vector(0, 0);

	private int speed = 1, pixelsMoved = 0;

	private int animationCounter;

	private ArrayList<AnimationIndex> animationIndecies;

	private ArrayList<AnimationIndex> walkingUpIndecies, walkingDownIndecies, walkingLeftIndecies, walkingRightIndecies;

	public PlayerController() {
		walkingUpIndecies = new ArrayList<AnimationIndex>();
		walkingUpIndecies.add(new AnimationIndex(6, false, true));
		walkingUpIndecies.add(new AnimationIndex(5, false, true));
		walkingUpIndecies.add(new AnimationIndex(6, true, true));
		walkingUpIndecies.add(new AnimationIndex(5, true, true));

		walkingDownIndecies = new ArrayList<AnimationIndex>();
		walkingDownIndecies.add(new AnimationIndex(0, false, true));
		walkingDownIndecies.add(new AnimationIndex(1, false, true));
		walkingDownIndecies.add(new AnimationIndex(0, true, true));
		walkingDownIndecies.add(new AnimationIndex(1, true, true));

		walkingLeftIndecies = new ArrayList<AnimationIndex>();
		walkingLeftIndecies.add(new AnimationIndex(2, false));
		walkingLeftIndecies.add(new AnimationIndex(3, false));
		walkingLeftIndecies.add(new AnimationIndex(2, false));
		walkingLeftIndecies.add(new AnimationIndex(4, false));

		walkingRightIndecies = new ArrayList<AnimationIndex>();
		walkingRightIndecies.add(new AnimationIndex(2, true));
		walkingRightIndecies.add(new AnimationIndex(3, true));
		walkingRightIndecies.add(new AnimationIndex(2, true));
		walkingRightIndecies.add(new AnimationIndex(4, true));
	}

	@Override
	public void update() {
		if (canMove) {

			sprinting = Game.getInput().isKeyDown(Input.KEY_LCONTROL);

			if (isWalking) {

				if (pixelsMoved % (Game.getGridSize() / 2) == 0) {
					animationCounter++;
					if (animationCounter >= animationIndecies.size()) {
						animationCounter = 0;
					}
				}

				Vector moveVector = sprinting ? direction.getMultiplied(2) : direction;
				position.add(moveVector);
				pixelsMoved += moveVector.getMagnitude();

				if (pixelsMoved >= Game.getGridSize()) {
					stopWalking();
				}

				spriteIndex = animationIndecies.get(animationCounter).getIndex();
				reverseImage = tempAnimation && animationIndecies.get(animationCounter).isTempReversable()
						? !animationIndecies.get(animationCounter).isReversed()
						: animationIndecies.get(animationCounter).isReversed();

				return;
			} else if (Game.isXPressed()) {
				Game.getMap().interactWithTile(getLookingTile(), getLookingDirection());
			}

			if (position.x % Game.getGridSize() != 0) {
				int multiplier = (int) position.x / (int) Game.getGridSize();
				position.x = Game.getGridSize() * multiplier;
			}
			if (position.y % Game.getGridSize() != 0) {
				int multiplier = (int) position.y / Game.getGridSize();
				position.y = Game.getGridSize() * multiplier;
			}

			Vector newPosition = new Vector(position.x, position.y);

			if (Game.getInput().isKeyDown(Input.KEY_W)) {
				direction = new Vector(0, -speed);
				newPosition.add(new Vector(0, -Game.getGridSize()));
				isWalking = true;
				animationIndecies = walkingUpIndecies;
			}
			if (Game.getInput().isKeyDown(Input.KEY_S) && !isWalking) {
				direction = new Vector(0, speed);
				newPosition.add(new Vector(0, Game.getGridSize()));
				isWalking = true;
				animationIndecies = walkingDownIndecies;
			}
			if (Game.getInput().isKeyDown(Input.KEY_A) && !isWalking) {
				direction = new Vector(-speed, 0);
				newPosition.add(new Vector(-Game.getGridSize(), 0));
				isWalking = true;
				animationIndecies = walkingLeftIndecies;
			}
			if (Game.getInput().isKeyDown(Input.KEY_D) && !isWalking) {
				direction = new Vector(speed, 0);
				newPosition.add(new Vector(Game.getGridSize(), 0));
				isWalking = true;
				animationIndecies = walkingRightIndecies;
			}

			if (isWalking) {
				spriteIndex = animationIndecies.get(0).getIndex();
				reverseImage = animationIndecies.get(0).isTempReversable() ? !animationIndecies.get(0).isReversed()
						: animationIndecies.get(0).isReversed();
				if (!Game.getMap().checkTile(newPosition, getLookingDirection(), true)) {
					stopWalking();
				}
			}
		}
	}

	@Override
	public void move(Direction direction) {
		Vector newPosition = new Vector(position.x, position.y);

		switch (direction) {
		case UP:
			this.direction = new Vector(0, -speed);
			newPosition.add(new Vector(0, -Game.getGridSize()));
			isWalking = true;
			animationIndecies = walkingUpIndecies;
			break;
		case DOWN:
			this.direction = new Vector(0, speed);
			newPosition.add(new Vector(0, Game.getGridSize()));
			isWalking = true;
			animationIndecies = walkingDownIndecies;
			break;
		case LEFT:
			this.direction = new Vector(-speed, 0);
			newPosition.add(new Vector(-Game.getGridSize(), 0));
			isWalking = true;
			animationIndecies = walkingLeftIndecies;
			break;
		case RIGHT:
			this.direction = new Vector(speed, 0);
			newPosition.add(new Vector(Game.getGridSize(), 0));
			isWalking = true;
			animationIndecies = walkingRightIndecies;
			break;
		}

		if (isWalking) {
			spriteIndex = animationIndecies.get(0).getIndex();
			reverseImage = animationIndecies.get(0).isTempReversable() ? !animationIndecies.get(0).isReversed()
					: animationIndecies.get(0).isReversed();
			if (!Game.getMap().checkTile(newPosition, getLookingDirection(), true)) {
				stopWalking();
			}
		}
	}

	private Vector getLookingTile() {
		Vector d = direction.getMultiplied(1 / direction.getMagnitude()).getMultiplied(Game.getGridSize());
		return position.getAdded(d);
	}

	private Direction getLookingDirection() {
		System.out.println(direction.getMultiplied(1 / direction.getMagnitude()));
		if (direction.getAngle() == 0)
			return Direction.LEFT;
		if (direction.getAngle() == 90)
			return Direction.DOWN;
		if (direction.getAngle() == 180)
			return Direction.RIGHT;
		if (direction.getAngle() == 270)
			return Direction.UP;
		return null;
	}

	private void stopWalking() {
		isWalking = false;
		pixelsMoved = 0;
		tempAnimation = !tempAnimation;
		animationCounter = 0;
	}

}
